[tool.poetry]
name = "fastapi-template"
version = "0.1.0"
description = "A FastAPI template project with common configurations" 
authors = ["Kevin Cui <linivek1986@gmail.com>"] 
readme = "README.md"


packages = [
    { include = "app", from = "." }
]

[tool.poetry.dependencies]
python = "^3.12" # 指定 Python 版本为 3.12 或更高版本

# FastAPI 框架及其相关依赖
fastapi = "^0.110.0" # 现代、快速（高性能）的 Web 框架，用于构建 API
uvicorn = "^0.29.0" # ASGI 服务器，用于运行 FastAPI 应用（开发环境）
gunicorn = "^22.0.0" # WSGI HTTP 服务器，常用于生产环境管理 Uvicorn worker
python-multipart = "^0.0.9" # 处理表单数据，FastAPI 需要它来解析 multipart/form-data

# 数据库相关依赖
sqlalchemy = "^2.0.29" # 强大的 SQL 工具包和对象关系映射 (ORM)
alembic = "^1.13.1" # 数据库迁移工具，与 SQLAlchemy 配合使用
asyncpg = "^0.29.0" # 用于 PostgreSQL 的异步驱动程序，与 SQLAlchemy 结合提供异步支持

# 数据验证和设置管理
pydantic = "^2.7.1" # 基于 Python 类型提示的数据验证和设置管理库
pydantic-settings = "^2.2.1" # Pydantic 的扩展，用于从环境变量、.env 文件等加载设置

# 安全和认证
passlib = "^1.7.4" # 密码哈希库，用于安全地存储和验证密码
python-jose = "^3.3.0" # JOSE (JSON Object Signing and Encryption) 库，用于处理 JWT

# 日志
loguru = "^0.7.2" # 简单易用但功能强大的日志库

# 异步任务队列和缓存
redis = "^5.0.1" # Redis 客户端，用于连接 Redis 服务器（缓存、消息代理）
celery = "^5.3.6" # 分布式任务队列，用于处理后台任务

# HTTP 客户端，常用于测试或进行外部 API 调用
httpx = "^0.27.0" # 异步 HTTP 客户端
email-validator = "^2.2.0"
greenlet = "^3.2.1"
bcrypt = "3.2.2"

[tool.poetry.group.dev.dependencies]
# 开发环境依赖，用于测试、代码格式化等
pytest = "^8.1.1" # 流行的 Python 测试框架
pytest-asyncio = "^0.23.6" # Pytest 插件，用于编写和运行异步测试
black = "^24.3.0" # 代码格式化工具，强制统一代码风格
isort = "^5.13.2" # Import 排序工具，自动整理 import 语句
flake8 = "^7.0.0" # 代码风格检查工具 (Linter)，检查代码是否符合规范
pre-commit = "^3.7.0" # 用于管理 Git 预提交钩子，可以在提交前自动运行格式化和检查工具
flake8-bugbear = "^24.12.12"
flake8-bandit = "^4.1.1"
flake8-comprehensions = "^3.16.0"
flake8-docstrings = "^1.7.0"

[tool.poetry.plugins."flake8.extension"]
FPF = "flake8_protected_files:ProtectedFilesPlugin"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black 配置
[tool.black]
line-length = 88 # 设置单行最大长度
target-version = ["py312"] # 指定目标 Python 版本，与 poetry.dependencies 中的 Python 版本一致

# Isort 配置
[tool.isort]
profile = "black" # 使用 black 兼容的配置
line_length = 88 # 设置单行最大长度

# Pytest 配置
[tool.pytest.ini_options]
testpaths = ["tests"] # 指定测试文件所在的目录
python_files = "test_*.py" # 指定测试文件的命名模式
asyncio_mode = "auto" # 自动处理异步测试函数
